name: Build and deploy Python app to Azure Web App - marcorpai

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Clean up disk space
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet /usr/share/swift /usr/local/lib/android /opt/ghc

      - name: Set up Python version
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      
      - name: Cache Python packages and virtual environment
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            env
          key: ${{ runner.os }}-pip-venv-${{ hashFiles('**/RagApp/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-venv-

      - name: Create and start virtual environment and install packages
        run: |
          python -m venv env
          source env/bin/activate
          pip install -r requirements.txt
      

      - name: Run collectstatic
        run: | 
          source env/bin/activate
          python manage.py collectstatic --noinput
        
      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Create archive of files
        run: |
          tar --exclude='*.pyc' --exclude='__pycache__' --exclude='.git' -czf python-app.tar.gz RagApp/ RagApp/requirements.txt


      
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v3
        with:
          name: python-app
          path: python-app.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT


    steps:
      - name: Clean up disk space before deploy
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet /usr/share/swift /usr/local/lib/android /opt/ghc


      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: python-app
          path: .


      - name: Extract artifact
        run: |
          tar -xzf python-app.tar.gz

      
      - name: Clean up old deployments
        run: |
          if [ -d "/home/site/wwwroot/old-directory" ]; then
            rm -rf /home/site/wwwroot/old-directory
          fi
          if [ -d "/home/LogFiles/old-logs" ]; then
            rm -rf /home/LogFiles/old-logs
          fi
          if [ -d "/home/data/temp" ]; then
            rm -rf /home/data/temp/*
          fi

      
      - name: Set up Python version
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python packages and virtual environment
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            env
          key: ${{ runner.os }}-pip-venv-${{ hashFiles('**/RagApp/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-venv-


      - name: Activate virtual environment 
        run: | 
          source env/bin/activate
          pip install -r requirements.txt


      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_45A7DFA6CFC54AA39C40CFB1763A6C70 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_FCE469D0F7D8497CA9A9A689E0CCF8B6 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_055AEA7994404A6BAB23DDD0C7E9444C }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        id: deploy-to-webapp
        with:
          app-name: 'marcorpai'
          slot-name: 'Production'

      - name: Clean up artifact
        run: rm python-app.tar.gz

      - name: Run cleanup script
        run: |
          chmod +x RagApp/cleanup.sh
          RagApp/cleanup.sh
